services:
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: crud-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: crud_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - crud-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: crud-mongodb
    environment:
      MONGO_INITDB_DATABASE: crud_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - crud-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: crud-backend
    environment:
      PORT: 5000
      JWT_SECRET: tu_super_secreto_jwt_cambiame_en_produccion
      PG_HOST: postgres
      PG_PORT: 5432
      PG_DATABASE: crud_db
      PG_USER: postgres
      PG_PASSWORD: postgres
      MONGO_URI: mongodb://mongodb:27017/crud_db
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - crud-network
    volumes:
      - ./backend:/app
      - /app/node_modules

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: crud-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - crud-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    stdin_open: true
    tty: true

networks:
  crud-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
